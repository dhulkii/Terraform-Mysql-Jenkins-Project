name: Deploy to server

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed
    branches:
      - main

env:
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  SERVER_USER: ${{ secrets.SERVER_USER }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  build:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest

    steps:
      - name: Display event type
        run: echo "Triggered by ${{ github.event_name }}"

      # Add both servers' public keys to known_hosts
      - name: Add server public keys to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      # Set up SSH key for secure connection
      - name: Set up SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Run PHPUnit Tests with Coverage
        run: |
          ssh -T -i private_key.pem ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            cd /home/ubuntu/velflix || exit 1
            # docker exec php-app vendor/bin/pest --coverage-clover=coverage.xml
          EOF
      
      # Run SonarQube Analysis on SonarQube Server
      - name: Run SonarQube Analysis
        run: |
          ssh -T -i private_key.pem ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            cd /home/ubuntu/velflix || exit 1
            git pull origin main
            docker exec sonarqube bash -c "
              sonar-scanner \
                -Dsonar.projectKey=sonar-key \
                -Dsonar.sources=/home/ubuntu/velflix/ \
                -Dsonar.php.coverage.reportPaths=/home/ubuntu/velflix/coverage.xml \
                -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
                -Dsonar.login=${{ secrets.SONAR_TOKEN }}"
          EOF

      # SSH into the application server and deploy the app
      - name: Deploy and Restart Application
        run: |
          ssh -T -i private_key.pem ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            cd /home/ubuntu/velflix || exit 1
            git pull origin main
            docker compose down
            docker compose up -d
          EOF

      # Cleanup SSH keyss
      - name: Clean up SSH keys
        run: rm -f private_key.pem
        if: always()

      - name: Clean up known_hosts file
        run: rm -f ~/.ssh/known_hosts
        if: always()
